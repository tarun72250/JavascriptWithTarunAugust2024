Javascript in the browser.

Javascript was initially created to make web pages alive .
Js can be written right in a web page's HTML to make it interactive.

The browser has an embedded engine called the Javascript engine or the Javascript's runtime.

Javascript's ability in the browser is very limited to protect the user's safety ,

Developer's tool :- 
Elements
Console 
Network :- All network request are there 
lighthouse tab : 
generate one report for the webpage   , that how your website should load , what should all improvement u should take in your in website.

 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Note :- Script tag specificity :-

Advantages of Script tag :- 
1. Separation of concerns
2. Browser Caching
Browser caching is a technique used by web browsers to store copies of web resources (like HTML pages, CSS files, JavaScript files, images, etc.) on a user's local device. When a user visits a website, their browser downloads these resources and stores them in a cache (a special storage area).

The next time the user visits the same website, the browser can load the cached versions of these resources instead of downloading them again from the web server. This process speeds up page load times, reduces server load, and saves bandwidth.

How Browser Caching Works
Initial Request: The first time a user visits a website, the browser sends a request to the server, which responds with the necessary files (HTML, CSS, JS, images, etc.). These files are then stored in the browser's cache.

Subsequent Requests: On subsequent visits to the same website, the browser checks if the cached versions of the resources are still valid (based on caching rules provided by the server). If they are valid, the browser uses the cached files instead of downloading them again.

Cache Expiration: Caches can expire based on headers set by the server, such as Cache-Control and Expires. These headers tell the browser how long a file should be kept in the cache before checking with the server for a newer version.

Conditional Requests: If the cache has expired, the browser sends a conditional request to the server, asking if the cached version is still up to date. If it is, the server responds with a 304 Not Modified status, and the browser continues using the cached version.

Benefits of Browser Caching :- 
The benefit of a separate javascript fil is that the browser will download it and store in its cache.
Improved Performance: Loading resources from the cache is much faster than downloading them from a server, which improves the overall user experience.
Reduced Server Load: Since fewer requests are sent to the server, the server can handle more users simultaneously.
Bandwidth Savings: Cached resources reduce the amount of data that needs to be downloaded, saving bandwidth for both the user and the server.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Console objects in js 
A_02_ConsoleObjects.html

The console object has several methods , log being one of thm , some of them are as follows.

assert() -> used to assert a condition.
clear()  -> clears the console.
log()    -> Outputs a message to the console.
table()  -> Display a tabular data
warn()   -> used for warnings.
error()  -> used for errors
info()   -> used for specail information


        console.log("Hello From DebugShala...")  // printing in console
        console.error("this line is an from error")   // shows red line in console  means error
        console.assert(5>53);     //A-02_ConsoleObjects.html:14 Assertion failed: console.assert
        // showing an assertion if u written true statement these will normally printed that value 
        // if your assertion is failed these through me error message

        //console.clear();//console was clear using these method


        //console.table()   // if u used this method 
        //u have one object like 
        employee ={name :"Rishabh" , designation :"Js Developers" , Profile:"Junior associate developer"}
        console.table(employee);

        console.warn("Hello from warining message");

        console.info("Hello from info message");
        console.log("Both are print in information block")

        //check in console
        console.table(console);

        //console.time() is most imp method
        // console.time("a")
        // console.timeEnd("a")
        //give output
        //a: 17639.22802734375 ms

        console.time("loop")
        for(let i=0 ; i<5 ; i++)
        {
            console.log("inside for loop")
        }
        console.timeEnd("loop");
        //output :- 
        //loop: 0.365966796875 ms

        //Ques :- compare the for loop and while loop timeing
        console.time("whileLoop")
        let i = 0;
        while(i < 5)
        {
            console.log("inside while loop");
            i++;
        }

        console.timeEnd("whileLoop")
        //whileLoop: 0.075927734375 ms

        

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//How any user interact with browser window using alert , prompt , and confirm dialogue box 

These dialog boxes are useful for providing information, collecting input, and confirming some actions.

alert()
The alert() function displays a simple dialog box with a message and an "OK" button. It doesn't return any value and is used primarily to convey information to the user.
alert("This is an alert message!");

Common Uses:
Notification: Alert the user about important information or warnings, such as form validation errors or successful actions.
alert("Your form has been submitted successfully!");

Debugging: Display values of variables or checkpoints during the development process.
alert("The value of x is: " + x);

-------------------------------------------------------------------

2. prompt()
The prompt() function displays a dialog box that asks the user for input. It contains a text field, "OK" and "Cancel" buttons, and returns the user's input as a string. If the user clicks "Cancel", it returns null.

let userName = prompt("Please enter your name:", "Guest");

Common Uses:
User Input: Collect simple user input, such as a name or a number.
let age = prompt("Please enter your age:");
if (age !== null) {
  alert("Your age is " + age);
}

Custom Greetings: Ask for user preferences to customize their experience, like a personalized greeting.
let userName = prompt("What's your name?");
if (userName !== null) {
  alert("Hello, " + userName + "!");
}

-------------------------------------------------------------------

3. confirm()
The confirm() function displays a dialog box with a message, an "OK" button, and a "Cancel" button. It returns a boolean value: true if the user clicks "OK", and false if the user clicks "Cancel".

let userConfirmed = confirm("Are you sure you want to delete this?");

Common Uses:
Action Confirmation: Ask the user to confirm an action before proceeding, such as deleting an item or submitting a form.
let isConfirmed = confirm("Do you really want to delete this file?");
if (isConfirmed) {
  // Proceed with deletion
} else {
  // Cancel deletion
}

-------------------------------------------------------------------
Window Objects in js 
A_04_WindowObject.html


Window object represents browser window and provides methods to control it ,It is a global object.

The window object in JavaScript is the global object representing the browser window or tab that contains a webpage. It's the top-level object in the browser's hierarchy and provides a vast range of properties, methods, and events to interact with and control the browser environment.

Document Object Model (Dom);
Dom represents the page content as HTML.

document.body  => page body as Js Object

document.body.style.background ="red";

---------------------------------
Browser Object Model (Bom);

The Browser Object Model (Bom) represent additional objects provided by the browser (host environment) for working with everything except the document part of the BOM.

The functions alert / confirm / prompt are also a part of the Bom 

check in console

location.href = "https://www.google.com/"


--------------------------------

1. Properties of the window Object
The window object has many properties that provide information about the browser and the document, as well as references to other objects.

window.document: Refers to the document object, which represents the content of the webpage (DOM).
console.log(window.document.title); // Logs the title of the current document

window.location: Provides information about the current URL and allows you to redirect to a different page.
console.log(window.location.href); // Logs the current URL
window.location.href = "https://www.example.com"; // Redirects to another URL

window.navigator: Provides information about the browser, like the user agent, platform, and language.
console.log(window.navigator.userAgent); // Logs the user agent string

window.history: Provides methods to interact with the browser's history (navigate back, forward, etc.).
window.history.back(); // Goes back to the previous page in history

window.innerWidth and window.innerHeight: Returns the width and height of the window's content area (viewport).
console.log(window.innerWidth); // Logs the width of the window's content area

window.screen: Provides information about the user's screen, like the width and height of the screen.
console.log(window.screen.width); // Logs the width of the user's screen

------------------------------------

2. Methods of the window Object
The window object includes many methods to perform actions like displaying dialog boxes, opening new windows, and more.

window.alert(): Displays an alert dialog box with a specified message.
window.alert("This is an alert box!");

window.prompt(): Displays a prompt dialog box that asks the user for input.
let userInput = window.prompt("Please enter your name:");

window.confirm(): Displays a confirm dialog box that asks the user to confirm an action.
let isConfirmed = window.confirm("Are you sure?");

window.open(): Opens a new browser window or tab with a specified URL.
window.open(URL , Target name , window_specification(height , width))
window.open("https://www.example.com", "_blank"); // Opens in a new tab

window.close(): Closes the current browser window (usually only works on windows opened via window.open()).
window.close(); // Closes the current window

--------------------------------------

3. Global Variables and Functions
Any global variable or function declared in your script is actually a property of the window object.

var myGlobalVar = 42;
console.log(window.myGlobalVar); // 42

function myGlobalFunction() {
  console.log("Hello, world!");
}
window.myGlobalFunction(); // "Hello, world!"