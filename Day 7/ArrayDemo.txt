Introduction to Arrays in JavaScript
Basics
An array is a data structure that can hold multiple values at once, each identified by an index.
Arrays in JavaScript are dynamic, meaning they can grow and shrink in size.
It means Collection of items.
In arrays we store multiple objects ,multiple type of values .

--------------------------------------------------------------------------------------------------------------
Declaration and Initialization:

let emptyArray = []; // An empty array
let numbers = [1, 2, 3, 4, 5]; // Array with numbers
let mixedArray = [1, "two", true, null]; // Array with mixed data types

Accessing Elements

let numbers = [1, 2, 3, 4, 5];
document.write(numbers[0]); // Output: 1
document.write(numbers[4]); // Output: 5
document.write(numbers); // [1, 2, 3, 4, 5]
document.write(numbers[5]); // undefined
document.write("Element in Array :- ",numbers.length); // 5 , it gives the element present in array


Modifying Elements
let numbers = [1, 2, 3, 4, 5];
numbers[0] = 10;
document.write(numbers[0]); // Output: 10

Note :- Arrays are mutable arrays can be changed , String are Immutable string cannot be changed.
Note :- In Javascript Arrays are objects , the typeof operator on arrays return Object.

if we check using typeof operator
document.write(typeof(numbers)); // object

Note :- Arrays can hold many values under a single name.

Quiz :- Using for loop print the array of different values are declared 

let mixedArray = [42, "Hello", true, null, undefined, {name: "Tarun"}, [1, 2, 3]];

for (let i = 0; i < mixedArray.length; i++) {
    document.write(mixedArray[i] + "<br>");
}

//output :- 
42
Hello
true
null
undefined
[object Object]
1,2,3


--------------------------------------------------------------------------------------------------------------
Array Methods/Basic Arrays Methods :- 

1.
toString() :- Converts an array to a string  of comma separated values.
 let n = [1,2,3,4];
 let b = n.toString();
document.write(b);//1,2,3,4
document.write(typeof(b));//string

2.
join() :- join all the array elements using using a separator.
let n = [1,2,3,4];
 let b = n.join("-");
document.write(b);//1-2-3-4
document.write(typeof(b));//string

3.
push() - These add element in original array .
Adds one or more elements to the end of an array and returns the new length.
let fruits = ["apple", "banana"];
fruits.push("orange");
document.write(fruits ); // Output: apple,banana,orange

4.
pop() - These add element in original array .
Removes the last element from an array and returns that element.
let fruits = ["apple", "banana", "orange"];
let last = fruits.pop();
document.write(last); // Output: orange

5.
shift() - These add element in original array .
Removes the first element from an array and returns that element.
let fruits = ["apple", "banana", "orange"];
let first = fruits.shift();
document.write(first); // Output: apple

6.
unshift() - These add element in original array .
Adds one or more elements to the beginning of an array and returns the new length.
let fruits = ["banana", "orange"];
fruits.unshift("apple");
document.write(fruits); // Output: apple,banana,orange


--------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------

A_04_IterationMethods :- 

     
1.
forEach() - Executes a provided function once for each array element.
let numbers = [1, 2, 3, 4, 5];
we generally did like these 

for(let i =0 ; i<=numbers.length ; i++)
{
     document.write(i + " "); // Output: 1 2 3 4 5
}

but now we use forEach() method
numbers.forEach(function(number) {
    document.write(number + " "); // Output: 1 2 3 4 5
});

2.
Array.from() :- this method is used to create an array from any other object.
let name = "Tarun";//Tarun is String object
let arr = Array.from(name);
console.log(arr);//check in console
document.write(arr);//T,a,r,u,n


3.

for of :- We use these loop to access object values directly
for( let i of numbers)
{
    document.write(i+"</br>")//these will give arrays values directly 
}


4. 
for in :- We use these loop to acces object keys values

let numbers = [11,22,5,77,99,33,44,88];
for( let i in numbers)
{
    document.write(i+" index and their value :-"+numbers[i]+"</br>")//these will give arrays keys values 
}

---------------------------------------------------------------------------------------------------------



map() - Creates a new array with the results of calling a provided function on every element.
let numbers = [1, 2, 3, 4, 5];
let squares = numbers.map(function(number) {
    return number * number;
});
document.write(squares); // Output: 1,4,9,16,25

4.
filter() - Creates a new array with all elements that pass the test implemented by the provided function.
let numbers = [1, 2, 3, 4, 5];
let evenNumbers = numbers.filter(function(number) {
    return number % 2 === 0;
});

document.write(evenNumbers); // Output: 2,4

5.
reduce() - Executes a reducer function on each element of the array, resulting in a single output value.
let numbers = [1, 2, 3, 4, 5];
let sum = numbers.reduce(function(total, number) {
    return total + number;
}, 0);
document.write(sum); // Output: 15



Ques :- One way to loop through an array, is using a for loop:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let fLen = fruits.length;

let text = "<ul>";
for (let i = 0; i < fLen; i++) {
  text += "<li>" + fruits[i] + "</li>";
}
text += "</ul>";
document.write(text);


Ques :- You can also use the Array.forEach() function:
const fruits = ["Banana", "Orange", "Apple", "Mango"];

let text = "<ul>";
fruits.forEach(myFunction);
text += "</ul>";

function myFunction(value) {
  text += "<li>" + value + "</li>";
}
--------------------------------------------------------------------------------------------------------------


1.
find() - Returns the value of the first element that passes a test.
let numbers = [1, 2, 3, 4, 5];
let found = numbers.find(function(number) {
    return number > 3;
});
document.write(found); // Output: 4

2.
findIndex() - Returns the index of the first element that passes a test.
let numbers = [1, 2, 3, 4, 5];
let index = numbers.findIndex(function(number) {
    return number > 3;
});
document.write(index); // Output: 3

3.
includes() - Determines whether an array includes a certain value.
let fruits = ["apple", "banana", "orange"];
document.write(fruits.includes("banana")); // Output: true

4.
some() - Tests whether at least one element in the array passes the test implemented by the provided function.
let numbers = [1, 2, 3, 4, 5];
let hasEven = numbers.some(function(number) {
    return number % 2 === 0;
});
document.write(hasEven); // Output: true

5.
every() - Tests whether all elements in the array pass the test implemented by the provided function.
let numbers = [1, 2, 3, 4, 5];
let allEven = numbers.every(function(number) {
    return number % 2 === 0;
});
document.write(allEven); // Output: false


6.

=-------------------------------------------------------------------------------------------------------------

Practical Examples:- 

Example 1: Finding the maximum number in an array
let numbers = [1, 2, 3, 4, 5];
let max = numbers.reduce(function(a, b) {
    return Math.max(a, b);
});
document.write(max); // Output: 5

--------------------------------------------------------------------------------------------------------------
Example 2: Removing duplicates from an array

let numbers = [1, 2, 3, 4, 5, 1, 2, 3];
let uniqueNumbers = [...new Set(numbers)];
document.write(uniqueNumbers); // Output: 1,2,3,4,5

--------------------------------------------------------------------------------------------------------------
Example 3: Flattening a nested array

let nestedArray = [1, [2, 3], [4, [5, 6]]];
let flatArray = nestedArray.flat(Infinity);
document.write(flatArray); // Output: 1,2,3,4,5,6


--------------------------------------------------------------------------------------------------------------